<?php
/**
* Ozz micro framework
* Author: Shakir
* Contact: shakeerwahid@gmail.com
*/

namespace Ozz\Core\system\auth;

class CreateAuth {

  private $migration_dir = __DIR__.SPC_BACK['core_2'].'database/migration/';
  private $controller_dir = __DIR__.SPC_BACK['core_2'].'app/controller/';
  private $view_dir = __DIR__.SPC_BACK['core_2'].'app/view/';



  public function index($com){
    //Create New Auth
    $this->createAuth();
  }



  /**
   * Create Auth
   */
  public function createAuth(){
    global $utils;
    $errors = [];

    // Users Migration already exist
    $migration_name = ucfirst(APP_CONFIG['auth_config']['users_table']);
    $find_user_migration = array_filter(scandir($this->migration_dir), function($item) {
      return $item[0] !== '.' && substr($item, -4) == '.php';
    });


    foreach ($find_user_migration as $k => $v) {
      if(file_exists($this->migration_dir.$v) && is_file($this->migration_dir.$v)){
        if(substr(substr($v, 14), 0, -4) == $migration_name){
          $errors[] = '['.$migration_name.'] migration already exist. Please remove or rename your existing ['.$migration_name.'] migration';
        }
      }
    }

    // Users Controller already exist
    if(file_exists($this->controller_dir.APP_CONFIG['auth_config']['auth_controller'].'.php')){
      $errors[] = '['.APP_CONFIG['auth_config']['auth_controller'].'] already exist. Please remove or rename your existing ['.APP_CONFIG['auth_config']['auth_controller'].'] if it is not generated by auth command.';
    }

    // If has any errors
    if(isset($errors) && !empty($errors)){
      ozz_console_error('Can\'t Generate Auth!');
      foreach ($errors as $key => $value) {
        $utils->console_return($value, 'red', '', false, true);
      }
      exit;
    }

    // No errors (Create new auth)
    $this->createAuthController(APP_CONFIG['auth_config']['auth_controller']);
    $this->createAuthMigration(APP_CONFIG['auth_config']['users_table']);
    $this->runAuthMigration($migration_name);
    $this->createAuthViewFile('sign-up', 'sign-up');
    $this->createAuthViewFile('login', 'login');
    $this->createAuthViewFile('forgot-password', 'forgot-password');
    $this->createAuthViewFile('reset-password', 'reset-password');
    $this->createAuthViewFile('verify-account', 'verify-account');
    // Create Routes ---
  }



  /**
   * Create auth controller
   * @param string Controller Name
   */
  private function createAuthController($name){
    global $utils;
    require 'auth-contents.php';

    $newFile = $this->controller_dir.$name.'.php';
    $controller_file = fopen($newFile, 'w');
    fwrite($controller_file, $auth_controller_content);
    
    $utils->console_return("[$name] generated", 'green');
  }



  /**
   * Create auth migration file
   * @param string Migration Name
   */
  private function createAuthMigration($name){
    global $utils;
    require 'auth-contents.php';

    $newFile = $this->migration_dir.'mg_'.date('d_m_Y_').ucfirst($name).'.php';
    $migration_file = fopen($newFile, 'w');
    fwrite($migration_file, $auth_migration_content);
    
    $utils->console_return("[$name] migration file generated", 'green');
  }



  /**
   * Run default auth migration
   * @param string $name Migration Name
   */
  private function runAuthMigration($name){
    global $utils;
    if(exec("php ozz migrate $name")){
      $utils->console_return("[$name] table created", 'green');
    }
  }



  /**
   * Create Auth View Files view
   */
  private function createAuthViewFile($type, $name){
    global $utils;
    require 'auth-contents.php';

    if (!file_exists($this->view_dir.'auth/')) {
      mkdir($this->view_dir.'auth/', 0777, true);
    }

    $newFile = $this->view_dir.'auth/'.$name.'.phtml';
    $view_file = fopen($newFile, 'w');

    switch ($type) {
      case 'sign-up':
        fwrite($view_file, $signup_content);
        break;

      case 'login':
        fwrite($view_file, $login_content);
        break;

      case 'forgot-password':
        fwrite($view_file, $forgot_pass_content);
        break;

      case 'reset-password':
        fwrite($view_file, $reset_pass_content);
        break;

      case 'verify-account':
        fwrite($view_file, $verify_account_content);
        break;
    }
    
    $utils->console_return("[$name] View file created", 'green');
  }

}
(new CreateAuth)->index($com);